/**
  VUT FIT
  IDS PROJEKT (SQL) 2022
  AUTOR: MARTIN PRIESSNITZ, XPRIES01
 */

-- SMAZÁNÍ TABULEK

DROP TABLE CTENAR CASCADE CONSTRAINT;
DROP TABLE ZAMESTNANEC CASCADE CONSTRAINT;
DROP TABLE ZANR CASCADE CONSTRAINT;
DROP TABLE AUTOR CASCADE CONSTRAINT;
DROP TABLE TITUL CASCADE CONSTRAINT;
DROP TABLE ZANR_AUTOR CASCADE CONSTRAINT;
DROP TABLE AUTOR_TITUL CASCADE CONSTRAINT;
DROP TABLE ZANR_TITUL CASCADE CONSTRAINT;
DROP TABLE REZERVACE CASCADE CONSTRAINT;
DROP TABLE VYPUJCKA CASCADE CONSTRAINT;

-- SMAZÁNÍ MATERIALIZOVANÉHO POHLEDU

DROP MATERIALIZED VIEW CTENAR_VYPUJCKY;


CREATE TABLE CTENAR
(
    CISLO_PRUKAZU INT GENERATED AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
    JMENO VARCHAR(50) NOT NULL,
    PRIJMENI VARCHAR(50) NOT NULL,
    ADRESA VARCHAR(50) NOT NULL,
    TELEFON VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    CONSTRAINT CTENAR_PK PRIMARY KEY (CISLO_PRUKAZU)
);

CREATE TABLE ZAMESTNANEC
(
    ID_ZAMESTNANCE INT GENERATED AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
    JMENO VARCHAR(50) NOT NULL,
    PRIJMENI VARCHAR(50) NOT NULL,
    ADRESA VARCHAR(50) NOT NULL,
    TELEFON VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    CONSTRAINT ZAMESTNANEC_PK PRIMARY KEY (ID_ZAMESTNANCE)
);

CREATE TABLE ZANR
(
    ID_ZANRU INT GENERATED AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
    NAZEV VARCHAR(50) NOT NULL,
    CONSTRAINT ZANR_PK PRIMARY KEY (ID_ZANRU)
);

CREATE TABLE AUTOR
(
    ID_AUTORA INT GENERATED AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
    JMENO VARCHAR(50) NOT NULL,
    PRIJMENI VARCHAR(50) NOT NULL,
    NAROZEN INT NOT NULL,
    NARODNOST VARCHAR(50) NOT NULL,
    CONSTRAINT AUTOR_PK PRIMARY KEY (ID_AUTORA)
);

CREATE TABLE TITUL
(
    ID_TITULU INT GENERATED AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
    STAV VARCHAR(20) NOT NULL,
    TYP VARCHAR(20) NOT NULL,
    POCET_STRAN INT NOT NULL,
    POUZITI VARCHAR(50) NOT NULL,
    ROK_VYDANI VARCHAR(50) NOT NULL,
    CENA INT NOT NULL,
    NAZEV VARCHAR(50) NOT NULL,
    ID_ZANRU INT NOT NULL,
    ID_AUTORA INT NOT NULL,
    CONSTRAINT TITUL_STAV_CHK CHECK (STAV IN('skladem', 'rezervovan', 'pujcen')),
    CONSTRAINT TITUL_TYP_CHK CHECK (TYP IN('kniha', 'casopis')),
    CONSTRAINT TITUL_PK PRIMARY KEY (ID_TITULU)
);

CREATE TABLE ZANR_AUTOR
(
    ID_ZANRU INT NOT NULL,
    ID_AUTORA INT NOT NULL,
    CONSTRAINT ZANR_AUTOR_PK PRIMARY KEY(ID_ZANRU,ID_AUTORA),
    CONSTRAINT ZANR_AUTOR_Z_FK FOREIGN KEY (ID_ZANRU) REFERENCES ZANR (ID_ZANRU),
    CONSTRAINT ZANR_AUTOR_A_FK FOREIGN KEY (ID_AUTORA) REFERENCES AUTOR (ID_AUTORA)
);

CREATE TABLE AUTOR_TITUL
(
    ID_AUTORA INT NOT NULL,
    ID_TITULU INT NOT NULL,
    CONSTRAINT AUTOR_TITUL_PK PRIMARY KEY(ID_AUTORA, ID_TITULU),
    CONSTRAINT AUTOR_TITUL_A_FK FOREIGN KEY(ID_AUTORA) REFERENCES AUTOR(ID_AUTORA),
    CONSTRAINT AUTOR_TITUL_T_FK FOREIGN KEY(ID_TITULU) REFERENCES TITUL(ID_TITULU)
);

CREATE TABLE ZANR_TITUL
(
    ID_ZANRU INT NOT NULL,
    ID_TITULU INT NOT NULL,
    CONSTRAINT ZANR_TITUL_PK PRIMARY KEY(ID_ZANRU, ID_TITULU),
    CONSTRAINT ZANR_TITUL_Z_FK FOREIGN KEY(ID_ZANRU) REFERENCES ZANR (ID_ZANRU),
    CONSTRAINT ZANR_TITUL_T_FK FOREIGN KEY(ID_TITULU) REFERENCES TITUL (ID_TITULU)
);

CREATE TABLE REZERVACE
(
    ID_REZERVACE INT GENERATED AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    STAV VARCHAR(50) NOT NULL,
    REZERVOVANO_OD DATE,
    ID_TITULU INT NOT NULL,
    CISLO_PRUKAZU INT NOT NULL,
    CONSTRAINT REZERVACE_STAV_CHK CHECK (STAV IN('platna', 'zrusena', 'ukoncena')),
    CONSTRAINT REZERVACE_PK PRIMARY KEY (ID_REZERVACE),
    CONSTRAINT REZERVACE_CTENAR_FK FOREIGN KEY (CISLO_PRUKAZU) REFERENCES CTENAR(CISLO_PRUKAZU),
    CONSTRAINT REZERVACE_TITUL_FK FOREIGN KEY (ID_TITULU) REFERENCES TITUL(ID_TITULU)
);

CREATE TABLE VYPUJCKA
(
    CISLO_VYPUJCKY INT GENERATED AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    STAV VARCHAR(50) NOT NULL,
    DATUM_PUJCENI DATE NOT NULL,
    DATUM_VRACENI DATE NOT NULL,
    CISLO_PRUKAZU INT NOT NULL,
    ID_ZAMESTNANCE_PUJCENI INT NOT NULL,
    ID_ZAMESTNANCE_PRIJMUTI INT NOT NULL,
    ID_REZERVACE INT,
    ID_TITULU INT NOT NULL,
    CONSTRAINT VYPUJCKA_STAV_CHK CHECK (STAV IN('probiha', 'ukoncena')),
    CONSTRAINT VYPUJCKA_PK PRIMARY KEY (CISLO_VYPUJCKY),
    CONSTRAINT VYPUJCKA_CTENAR_FK FOREIGN KEY (CISLO_PRUKAZU) REFERENCES CTENAR(CISLO_PRUKAZU),
    CONSTRAINT VYPUJCKA_ZAMESTNANEC_PUJCENI_FK FOREIGN KEY (ID_ZAMESTNANCE_PUJCENI) REFERENCES ZAMESTNANEC(ID_ZAMESTNANCE),
    CONSTRAINT VYPUJCKA_ZAMESTNANEC_PRIJMUTI_FK FOREIGN KEY (ID_ZAMESTNANCE_PRIJMUTI) REFERENCES ZAMESTNANEC(ID_ZAMESTNANCE),
    CONSTRAINT VYPUJCKA_REZERVACE_FK FOREIGN KEY (ID_REZERVACE) REFERENCES REZERVACE(ID_REZERVACE),
    CONSTRAINT VYPUJCKA_TITUL_FK FOREIGN KEY (ID_TITULU) REFERENCES TITUL(ID_TITULU)
);

/**
VYTVOŘENÍ TRIGERRŮ:
                    TRIGGER NA TITUL
                    TRIGGER NA REZERVACI

 **/

CREATE OR REPLACE TRIGGER TITUL
    BEFORE INSERT OR UPDATE OF STAV ON TITUL
    REFERENCING NEW AS NEW
    FOR EACH ROW
DECLARE
    VAR1 INTEGER;
    VAR2 INTEGER;
BEGIN
    IF(:NEW.STAV = 'rezervovan') THEN
        BEGIN
            SELECT REZERVACE.ID_REZERVACE INTO VAR1 FROM REZERVACE WHERE REZERVACE.STAV = 'platna' AND REZERVACE.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            VAR1 := NULL;
        end;
        IF(VAR1 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ REZERVOVÁN ');
        end if;
    ELSIF(:NEW.STAV = 'pujcen') THEN
         BEGIN
            SELECT REZERVACE.ID_TITULU INTO VAR1 FROM REZERVACE WHERE REZERVACE.STAV = 'ukončena' AND REZERVACE.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                VAR1 := NULL;
        END;

        BEGIN
            SELECT VYPUJCKA.CISLO_VYPUJCKY INTO VAR2 FROM VYPUJCKA WHERE VYPUJCKA.STAV='probiha' AND VYPUJCKA.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                VAR2 := NULL;
        END;

        IF (VAR1 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ REZERVOVÁN');
        ELSIF (VAR2 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ SKLADEM');
        END IF;

    END IF;
END;

-- TRIGGER NA REZERVACE

CREATE OR REPLACE TRIGGER REZERVACE_TITULU
    BEFORE INSERT ON REZERVACE
    REFERENCING NEW AS NEW
    FOR EACH ROW
    DECLARE
    VAR1 INTEGER;
    BEGIN
        IF (:NEW.STAV = 'platna') THEN
    BEGIN
        SELECT TITUL.ID_TITULU INTO VAR1 FROM TITUL WHERE TITUL.STAV = 'skladem' AND TITUL.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
                VAR1 := NULL;
    END;
    IF (VAR1 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ SKLADEM');
    END IF;

    ELSIF (:NEW.STAV = 'zrusena') THEN
           BEGIN
        SELECT TITUL.ID_TITULU INTO VAR1 FROM TITUL WHERE TITUL.STAV = 'rezervovan' AND TITUL.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
                VAR1 := NULL;
    END;
    IF (VAR1 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ REZERVOVÁN');
    END IF;

    ELSIF (:NEW.STAV = 'ukoncena') THEN
    BEGIN
        SELECT TITUL.ID_TITULU INTO VAR1 FROM TITUL WHERE TITUL.STAV = 'rezervovan' AND TITUL.ID_TITULU = :NEW.ID_TITULU FETCH FIRST 1 ROWS ONLY;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
                VAR1 := NULL;
    END;
    IF (VAR1 IS NULL) THEN
            RAISE_APPLICATION_ERROR(-333, 'TITUL NENÍ REZERVOVÁN');
    END IF;
    END IF;
    END;/





/**
VLOŽENÍ HODNOT DO TABULEK
*/

INSERT INTO CTENAR VALUES (DEFAULT,'Martin','Priessnitz','Sebelova','758487145','mp@gmail.com');
INSERT INTO CTENAR VALUES (DEFAULT,'Jan','Priessnitz','Sebelova','456789123','jp@gmail.com');
INSERT INTO CTENAR VALUES (DEFAULT,'Vit','Priessnitz','Sebelova','159487365','vp@gmail.com');
INSERT INTO CTENAR VALUES (DEFAULT,'Matej','Hruby','Travniky','568478136','mh@gmail.com');
INSERT INTO CTENAR VALUES (DEFAULT,'Jana','Hruba','Travniky','154876954','jh@gmail.com');
INSERT INTO CTENAR VALUES (DEFAULT,'Filip','Hrabal','Cestovni','123456465','fh@gmail.com');

INSERT INTO ZAMESTNANEC VALUES (DEFAULT,'Radek','Adamec','Stredni','584544882','ra@gmail.com');
INSERT INTO ZAMESTNANEC VALUES (DEFAULT,'Martin','Kovar','Kolarova','698456951','mk@gmail.com');
INSERT INTO ZAMESTNANEC VALUES (DEFAULT,'Klara','Marvanova','Skolni','126589478','km@gmail.com');

INSERT INTO AUTOR VALUES (DEFAULT,'Joanne','Rowling',1965,'britská');
INSERT INTO AUTOR VALUES (DEFAULT,'Stephen','King',1947,'americká');
INSERT INTO AUTOR VALUES (DEFAULT,'Jo','Nesbo',1960,'norská');
INSERT INTO AUTOR VALUES (DEFAULT,'ABC','DEVELOP',1980,'česká');

INSERT INTO ZANR VALUES (DEFAULT,'sci-fi');
INSERT INTO ZANR VALUES (DEFAULT,'fantasy');
INSERT INTO ZANR VALUES (DEFAULT,'horor');
INSERT INTO ZANR VALUES (DEFAULT,'komedie');
INSERT INTO ZANR VALUES (DEFAULT,'detektivní');

INSERT INTO TITUL VALUES (DEFAULT,'skladem','kniha',200,'pouzita',TO_DATE('2000-05-05', 'YYYY-MM-DD'),300,'Harry_Potter', 2,1);
INSERT INTO TITUL VALUES (DEFAULT,'skladem','kniha',300,'opotrebena',TO_DATE('2013-04-11', 'YYYY-MM-DD'),450,'Americký_upír', 2,2);
INSERT INTO TITUL VALUES (DEFAULT,'skladem','kniha',450,'nova',TO_DATE('2016-01-22', 'YYYY-MM-DD'),500,'Bazar_zlých_snů', 1,2);
INSERT INTO TITUL VALUES (DEFAULT,'skladem','kniha',420,'pouzita',TO_DATE('2002-10-05', 'YYYY-MM-DD'),200,'Nemesis', 3,3);
INSERT INTO TITUL VALUES (DEFAULT,'skladem','kniha',270,'opotrebena',TO_DATE('2007-07-01', 'YYYY-MM-DD'),500,'Sněhulák', 5,3);
INSERT INTO TITUL VALUES (DEFAULT,'skladem', 'casopis', 50, 'novy', TO_DATE('2020-05-15', 'YYYY-MM-DD'),100,'ABC', 2,4);

INSERT INTO REZERVACE VALUES (DEFAULT,'platna', TO_DATE('2022-01-02', 'YYYY-MM-DD'), 1,1);
INSERT INTO REZERVACE VALUES (DEFAULT,'platna', TO_DATE('2022-01-15', 'YYYY-MM-DD'), 2,3);
INSERT INTO REZERVACE VALUES (DEFAULT,'platna', TO_DATE('2022-01-16', 'YYYY-MM-DD'), 4,4);
INSERT INTO REZERVACE VALUES (DEFAULT,'platna', TO_DATE('2022-02-05', 'YYYY-MM-DD'), 5,2);
INSERT INTO REZERVACE VALUES (DEFAULT,'platna', TO_DATE('2022-02-12', 'YYYY-MM-DD'), 3,5);

UPDATE TITUL SET STAV = 'rezervovan' WHERE ID_TITULU = 1;
UPDATE TITUL SET STAV = 'rezervovan' WHERE ID_TITULU = 2;
UPDATE TITUL SET STAV = 'rezervovan' WHERE ID_TITULU = 4;
UPDATE TITUL SET STAV = 'rezervovan' WHERE ID_TITULU = 5;
UPDATE TITUL SET STAV = 'rezervovan' WHERE ID_TITULU = 3;

INSERT INTO VYPUJCKA VALUES (DEFAULT,'probiha', TO_DATE('2022-01-03', 'YYYY-MM-DD'), TO_DATE('2022-01-20', 'YYYY-MM-DD'),1,1,2,1,1);
INSERT INTO VYPUJCKA VALUES (DEFAULT,'probiha', TO_DATE('2022-01-17', 'YYYY-MM-DD'),TO_DATE('2022-01-25', 'YYYY-MM-DD') ,3,2,2,2,2);
INSERT INTO VYPUJCKA VALUES (DEFAULT,'probiha', TO_DATE('2022-02-06', 'YYYY-MM-DD'), TO_DATE('2022-02-15', 'YYYY-MM-DD'),2,1,3,4,5);
INSERT INTO VYPUJCKA VALUES (DEFAULT,'probiha', TO_DATE('2022-02-16', 'YYYY-MM-DD'),TO_DATE('2022-02-28', 'YYYY-MM-DD'),5,3,1,5,3);

UPDATE REZERVACE SET STAV = 'ukoncena' WHERE  ID_REZERVACE = 1;
UPDATE REZERVACE SET STAV = 'ukoncena' WHERE  ID_REZERVACE = 2;
UPDATE REZERVACE SET STAV = 'ukoncena' WHERE  ID_REZERVACE = 4;
UPDATE REZERVACE SET STAV = 'ukoncena' WHERE  ID_REZERVACE = 5;


-- ZOBRAZÍ VYPŮJČENÉ KNIHY NA PŘÍJMENÍ PRIESSNITZ

SELECT *
    FROM CTENAR
    JOIN VYPUJCKA
    ON CTENAR.CISLO_PRUKAZU = VYPUJCKA.CISLO_PRUKAZU
    WHERE CTENAR.PRIJMENI = 'Priessnitz' AND VYPUJCKA.STAV = 'probiha';

-- ZOBRAZÍ VŠECHNY KNIHY S ŽÁNREM FANTASY

SELECT *
    FROM TITUL
    JOIN ZANR
    ON TITUL.ID_ZANRU = ZANR.ID_ZANRU
    WHERE ZANR.NAZEV = 'fantasy';

-- ZOBRAZÍ POČET VYDANÝCH VÝPŮJČEK JEDNOTLIVÝVH ZAMĚSTNANCŮ

SELECT COUNT(*), ZAMESTNANEC.PRIJMENI
    FROM ZAMESTNANEC, VYPUJCKA
    WHERE ZAMESTNANEC.ID_ZAMESTNANCE = VYPUJCKA.ID_ZAMESTNANCE_PUJCENI
    GROUP BY ZAMESTNANEC.PRIJMENI;

-- ZOBRAZÍ PRŮMĚRNÝ POČET STRAN AUTOROVÝCH KNIH

SELECT AVG(POCET_STRAN), AUTOR.PRIJMENI
    FROM TITUL, AUTOR
    WHERE TITUL.ID_AUTORA = AUTOR.ID_AUTORA
    GROUP BY AUTOR.PRIJMENI;

-- ZOBRAZÍ VŠECHNY VYZVEDNUTÉ REZERVACE

SELECT *
    FROM REZERVACE
    WHERE EXISTS
        (
        SELECT *
        FROM VYPUJCKA
        WHERE VYPUJCKA.ID_REZERVACE = REZERVACE.ID_REZERVACE
        );

-- ZOBRAZÍ TITULY S POČTEM STRAN MENŠÍ JAK 350
SELECT *
    FROM TITUL
    WHERE TITUL.ID_AUTORA IN (
        SELECT AUTOR.ID_AUTORA
        FROM AUTOR
        WHERE TITUL.POCET_STRAN < 350
        );

/**
  TVORBA PROCEDUR
**/

CREATE OR REPLACE PROCEDURE FIND_TITUL
AS
    NAZEV_T TITUL.NAZEV%TYPE;
    POUZITI_T TITUL.POUZITI%TYPE;
    STAV_T TITUL.STAV%TYPE;
    CURSOR MINE IS SELECT NAZEV, POUZITI, STAV FROM TITUL;
BEGIN
    DBMS_OUTPUT.PUT_LINE('INFORMACE O TITULU HARRY POTTER');
    IF MINE %ISOPEN THEN
        CLOSE MINE;
    END IF;
    OPEN MINE;
    LOOP
        FETCH MINE INTO NAZEV_T, POUZITI_T, STAV_T;
        EXIT WHEN MINE%NOTFOUND;
        IF NAZEV_T = 'Harry_Potter' THEN
            DBMS_OUTPUT.put_line('NAZEV:'|| NAZEV_T ||'     POUZITI:'|| POUZITI_T ||'     STAV:'|| STAV_T);
        END IF;
    END LOOP;EXCEPTION
        WHEN others THEN
         DBMS_OUTPUT.PUT_LINE('ERROR EXECUTING THE FIND_TITUL');
    CLOSE MINE;
END;/

BEGIN FIND_TITUL();
END;/

-- Procedura na výkonnost zaměstnanců
CREATE OR REPLACE PROCEDURE ZAMESTNANEC_STATS
IS
    ALL_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO ALL_COUNT FROM VYPUJCKA;

    FOR ROW1 IN (SELECT ZAMESTNANEC.JMENO, ZAMESTNANEC.PRIJMENI, COUNT(VYPUJCKA.CISLO_VYPUJCKY) AS CNT FROM ZAMESTNANEC, VYPUJCKA WHERE ZAMESTNANEC.ID_ZAMESTNANCE = VYPUJCKA.ID_ZAMESTNANCE_PUJCENI GROUP BY ZAMESTNANEC.JMENO, ZAMESTNANEC.PRIJMENI)
    LOOP
        DBMS_OUTPUT.PUT_LINE(ROUND((row1.CNT/all_count * 100),2 )    ||'% pro: ' || row1.JMENO ||'  '|| row1.PRIJMENI);
        end loop;

end;

BEGIN ZAMESTNANEC_STATS();
          END;/


EXPLAIN PLAN SET STATEMENT_ID  = 'PLAN' FOR
SELECT COUNT(*), AUTOR.PRIJMENI, AUTOR.JMENO
              FROM AUTOR
              JOIN TITUL T on AUTOR.ID_AUTORA = T.ID_AUTORA
                WHERE AUTOR.PRIJMENI = 'Rowling'
              GROUP BY AUTOR.PRIJMENI, AUTOR.JMENO;
SELECT plan_table_output
FROM table(dbms_xplan.display('plan_table','PLAN','typical'));


CREATE INDEX AUTOR_INDEX
ON AUTOR(ID_AUTORA, PRIJMENI, JMENO);


SELECT COUNT(*), AUTOR.PRIJMENI, AUTOR.JMENO
              FROM AUTOR
              JOIN TITUL T on AUTOR.ID_AUTORA = T.ID_AUTORA
              GROUP BY AUTOR.PRIJMENI, AUTOR.JMENO;

EXPLAIN PLAN SET STATEMENT_ID  = 'PLAN' FOR
SELECT COUNT(*), AUTOR.PRIJMENI, AUTOR.JMENO
              FROM AUTOR
              JOIN TITUL T on AUTOR.ID_AUTORA = T.ID_AUTORA
                WHERE AUTOR.PRIJMENI = 'Rowling'
              GROUP BY AUTOR.PRIJMENI, AUTOR.JMENO;
SELECT plan_table_output
FROM table(dbms_xplan.display('plan_table','PLAN','typical'));

//*
VYTVOŘENÍ JEDNOHO MATERIALIZOVANÉHO POHLEDU
*//

CREATE MATERIALIZED VIEW LOG ON VYPUJCKA WITH ROWID;
CREATE MATERIALIZED VIEW LOG ON CTENAR WITH ROWID;

CREATE MATERIALIZED VIEW CTENAR_VYPUJCKY
NOLOGGING
CACHE
BUILD IMMEDIATE
REFRESH FAST ON COMMIT
ENABLE QUERY REWRITE
AS
  SELECT JMENO, PRIJMENI, CISLO_VYPUJCKY, STAV, VYPUJCKA.ROWID AS VYPUJCKA_ROWID, CTENAR.ROWID AS CTENAR_ROWID
  FROM CTENAR
  JOIN VYPUJCKA
  ON CTENAR.CISLO_PRUKAZU = VYPUJCKA.CISLO_PRUKAZU;


